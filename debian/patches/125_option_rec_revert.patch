--- a/test/fake-symbols.c
+++ b/test/fake-symbols.c
@@ -26,7 +26,7 @@ xf86WaitForInput (int fd, int timeout)
 }
 
 _X_EXPORT int
-xf86OpenSerial (OPTTYPE options)
+xf86OpenSerial (pointer options)
 {
     return 0;
 }
@@ -37,43 +37,43 @@ xf86SetSerialSpeed (int fd, int speed)
     return 0;
 }
 
-_X_EXPORT OPTTYPE
-xf86ReplaceIntOption(OPTTYPE optlist, const char *name, const int val)
+_X_EXPORT pointer
+xf86ReplaceIntOption(pointer optlist, const char *name, const int val)
 {
     return NULL;
 }
 
 _X_EXPORT char *
-xf86SetStrOption(OPTTYPE optlist, const char *name, CONST char *deflt)
+xf86SetStrOption(pointer optlist, const char *name, char *deflt)
 {
     return NULL;
 }
 
 _X_EXPORT int
-xf86SetBoolOption(OPTTYPE optlist, const char *name, int deflt)
+xf86SetBoolOption(pointer optlist, const char *name, int deflt)
 {
     return 0;
 }
 
-_X_EXPORT OPTTYPE
-xf86AddNewOption(OPTTYPE head, const char *name, const char *val)
+_X_EXPORT pointer
+xf86AddNewOption(pointer head, const char *name, const char *val)
 {
     return NULL;
 }
-_X_EXPORT CONST char *
-xf86FindOptionValue(OPTTYPE options, const char *name)
+_X_EXPORT char *
+xf86FindOptionValue(pointer options, const char *name)
 {
     return NULL;
 }
 
 _X_EXPORT char *
-xf86OptionName(OPTTYPE opt)
+xf86OptionName(pointer opt)
 {
     return NULL;
 }
 
 _X_EXPORT char *
-xf86OptionValue(OPTTYPE opt)
+xf86OptionValue(pointer opt)
 {
     return NULL;
 }
@@ -85,7 +85,7 @@ xf86NameCmp(const char *s1, const char *
 }
 
 _X_EXPORT char *
-xf86CheckStrOption(OPTTYPE optlist, const char *name, char *deflt)
+xf86CheckStrOption(pointer optlist, const char *name, char *deflt)
 {
     return NULL;
 }
@@ -196,8 +196,8 @@ xf86DeleteInput(InputInfoPtr pInp, int f
     return;
 }
 
-_X_EXPORT OPTTYPE
-xf86OptionListDuplicate(OPTTYPE options)
+_X_EXPORT pointer
+xf86OptionListDuplicate(pointer options)
 {
     return NULL;
 }
@@ -225,7 +225,7 @@ xf86PostKeyboardEvent(DeviceIntPtr
 }
 
 _X_EXPORT int
-xf86SetIntOption(OPTTYPE optlist, const char *name, int deflt)
+xf86SetIntOption(pointer optlist, const char *name, int deflt)
 {
     return 0;
 }
@@ -254,7 +254,7 @@ InitPtrFeedbackClassDeviceStruct(DeviceI
 _X_EXPORT int
 XIChangeDeviceProperty (DeviceIntPtr dev, Atom property, Atom type,
                         int format, int mode, unsigned long len,
-                        OPTTYPE value, Bool sendevent)
+                        pointer value, Bool sendevent)
 {
     return 0;
 }
@@ -367,15 +367,15 @@ InitValuatorClassDeviceStruct(DeviceIntP
 }
 
 
-_X_EXPORT OPTTYPE
-xf86ReplaceStrOption(OPTTYPE optlist, const char *name, const char* val)
+_X_EXPORT pointer
+xf86ReplaceStrOption(pointer optlist, const char *name, const char* val)
 {
     return NULL;
 }
 
 
-_X_EXPORT OPTTYPE
-xf86NextOption(OPTTYPE list)
+_X_EXPORT pointer
+xf86NextOption(pointer list)
 {
     return NULL;
 }
@@ -424,14 +424,14 @@ InitFocusClassDeviceStruct(DeviceIntPtr
 
 #if GET_ABI_MAJOR(ABI_XINPUT_VERSION) < 12
 void
-xf86ProcessCommonOptions(InputInfoPtr pInfo, OPTTYPE list)
+xf86ProcessCommonOptions(InputInfoPtr pInfo, pointer list)
 {
 }
 
 void
 xf86CollectInputOptions(InputInfoPtr pInfo,
                         const char **defaultOpts,
-                        OPTTYPE extraOpts)
+                        pointer extraOpts)
 {
 }
 
--- a/test/fake-symbols.h
+++ b/test/fake-symbols.h
@@ -1,37 +1,29 @@
 #include <xorg-server.h>
 #include <xf86Xinput.h>
 
-#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 14
-#define OPTTYPE XF86OptionPtr
-#define CONST const
-#else
-#define OPTTYPE pointer
-#define CONST 
-#endif
-
 extern int xf86ReadSerial (int fd, void *buf, int count);
 extern int xf86WriteSerial (int fd, const void *buf, int count);
 extern int xf86CloseSerial (int fd);
 extern int xf86WaitForInput (int fd, int timeout);
-extern int xf86OpenSerial (OPTTYPE options);
+extern int xf86OpenSerial (pointer options);
 extern int xf86SetSerialSpeed (int fd, int speed);
 
-extern OPTTYPE xf86ReplaceIntOption(OPTTYPE optlist, const char *name, const int val);
-extern OPTTYPE xf86AddNewOption(OPTTYPE head, const char *name, const char *val);
-extern char* xf86OptionName(OPTTYPE opt);
-extern CONST char* xf86FindOptionValue(OPTTYPE options, const char *name);
+extern pointer xf86ReplaceIntOption(pointer optlist, const char *name, const int val);
+extern pointer xf86AddNewOption(pointer head, const char *name, const char *val);
+extern char* xf86OptionName(pointer opt);
+extern char* xf86FindOptionValue(pointer options, const char *name);
 extern int xf86NameCmp(const char *s1, const char *s2);
-extern char* xf86CheckStrOption(OPTTYPE optlist, const char *name, char *deflt);
+extern char* xf86CheckStrOption(pointer optlist, const char *name, char *deflt);
 
 
-extern char * xf86SetStrOption(OPTTYPE optlist, const char *name, CONST char *deflt);
-extern int xf86SetBoolOption(OPTTYPE optlist, const char *name, int deflt);
-extern OPTTYPE xf86AddNewOption(OPTTYPE head, const char *name, const char *val);
-extern CONST char* xf86FindOptionValue(OPTTYPE options, const char *name);
-extern char* xf86OptionName(OPTTYPE opt);
-extern char *xf86OptionValue(OPTTYPE opt);
+extern char * xf86SetStrOption(pointer optlist, const char *name, char *deflt);
+extern int xf86SetBoolOption(pointer optlist, const char *name, int deflt);
+extern pointer xf86AddNewOption(pointer head, const char *name, const char *val);
+extern char* xf86FindOptionValue(pointer options, const char *name);
+extern char* xf86OptionName(pointer opt);
+extern char *xf86OptionValue(pointer opt);
 extern int xf86NameCmp(const char *s1, const char *s2);
-extern char * xf86CheckStrOption(OPTTYPE optlist, const char *name, char *deflt);
+extern char * xf86CheckStrOption(pointer optlist, const char *name, char *deflt);
 extern void xf86AddEnabledDevice(InputInfoPtr pInfo);
 extern void xf86RemoveEnabledDevice(InputInfoPtr pInfo);
 extern Atom XIGetKnownProperty(char *name);
@@ -61,7 +52,7 @@ XISetDevicePropertyDeletable(DeviceIntPt
 
 extern InputInfoPtr xf86FirstLocalDevice(void);
 extern void xf86DeleteInput(InputInfoPtr pInp, int flags);
-extern OPTTYPE xf86OptionListDuplicate(OPTTYPE options);
+extern pointer xf86OptionListDuplicate(pointer options);
 extern Bool
 InitButtonClassDeviceStruct(DeviceIntPtr dev, int numButtons, Atom* labels,
                             CARD8 *map);
@@ -73,7 +64,7 @@ xf86PostKeyboardEvent(DeviceIntPtr
                       unsigned int      key_code,
                       int               is_down);
 extern int
-xf86SetIntOption(OPTTYPE optlist, const char *name, int deflt);
+xf86SetIntOption(pointer optlist, const char *name, int deflt);
 extern void
 xf86PostButtonEventP(DeviceIntPtr	device,
                      int		is_absolute,
@@ -91,7 +82,7 @@ InitPtrFeedbackClassDeviceStruct(DeviceI
 extern int
 XIChangeDeviceProperty (DeviceIntPtr dev, Atom property, Atom type,
                         int format, int mode, unsigned long len,
-                        OPTTYPE value, Bool sendevent);
+                        pointer value, Bool sendevent);
 extern CARD32 GetTimeInMillis (void);
 
 extern int
@@ -140,10 +131,10 @@ extern Bool
 InitValuatorClassDeviceStruct(DeviceIntPtr dev, int numAxes, Atom *labels,
                               int numMotionEvents, int mode);
 
-extern OPTTYPE
-xf86ReplaceStrOption(OPTTYPE optlist, const char *name, const char* val);
+extern pointer
+xf86ReplaceStrOption(pointer optlist, const char *name, const char* val);
 
-extern OPTTYPE xf86NextOption(OPTTYPE list);
+extern pointer xf86NextOption(pointer list);
 
 extern int
 XIGetDeviceProperty (DeviceIntPtr dev, Atom property, XIPropertyValuePtr *value);
@@ -167,12 +158,12 @@ extern Bool InitFocusClassDeviceStruct(D
 
 #if GET_ABI_MAJOR(ABI_XINPUT_VERSION) < 12
 extern void
-xf86ProcessCommonOptions(InputInfoPtr pInfo, OPTTYPE list);
+xf86ProcessCommonOptions(InputInfoPtr pInfo, pointer list);
 
 extern void
 xf86CollectInputOptions(InputInfoPtr pInfo,
                         const char **defaultOpts,
-                        OPTTYPE extraOpts);
+                        pointer extraOpts);
 
 extern InputInfoPtr
 xf86AllocateInput(InputDriverPtr drv, int flags);
